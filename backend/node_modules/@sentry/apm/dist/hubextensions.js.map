{"version":3,"file":"hubextensions.js","sourceRoot":"","sources":["../src/hubextensions.ts"],"names":[],"mappings":"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","sourcesContent":["import { getMainCarrier, Hub } from '@sentry/hub';\nimport { SpanContext, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { Span } from './span';\nimport { Transaction } from './transaction';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * {@see Hub.startTransaction}\n */\nfunction startTransaction(this: Hub, context: TransactionContext): Transaction {\n  const transaction = new Transaction(context, this);\n\n  const client = this.getClient();\n  // Roll the dice for sampling transaction, all child spans inherit the sampling decision.\n  if (transaction.sampled === undefined) {\n    const sampleRate = (client && client.getOptions().tracesSampleRate) || 0;\n    // if true = we want to have the transaction\n    // if false = we don't want to have it\n    // Math.random (inclusive of 0, but not 1)\n    transaction.sampled = Math.random() < sampleRate;\n  }\n\n  // We only want to create a span list if we sampled the transaction\n  // If sampled == false, we will discard the span anyway, so we can save memory by not storing child spans\n  if (transaction.sampled) {\n    const experimentsOptions = (client && client.getOptions()._experiments) || {};\n    transaction.initSpanRecorder(experimentsOptions.maxSpans as number);\n  }\n\n  return transaction;\n}\n\n/**\n * {@see Hub.startSpan}\n */\nfunction startSpan(this: Hub, context: SpanContext): Transaction | Span {\n  /**\n   * @deprecated\n   * TODO: consider removing this in a future release.\n   *\n   * This is for backwards compatibility with releases before startTransaction\n   * existed, to allow for a smoother transition.\n   */\n  {\n    // The `TransactionContext.name` field used to be called `transaction`.\n    const transactionContext = context as Partial<TransactionContext & { transaction: string }>;\n    if (transactionContext.transaction !== undefined) {\n      transactionContext.name = transactionContext.transaction;\n    }\n    // Check for not undefined since we defined it's ok to start a transaction\n    // with an empty name.\n    if (transactionContext.name !== undefined) {\n      logger.warn('Deprecated: Use startTransaction to start transactions and Transaction.startChild to start spans.');\n      return this.startTransaction(transactionContext as TransactionContext);\n    }\n  }\n\n  const scope = this.getScope();\n  if (scope) {\n    // If there is a Span on the Scope we start a child and return that instead\n    const parentSpan = scope.getSpan();\n    if (parentSpan) {\n      return parentSpan.startChild(context);\n    }\n  }\n\n  // Otherwise we return a new Span\n  return new Span(context);\n}\n\n/**\n * This patches the global object and injects the APM extensions methods\n */\nexport function addExtensionMethods(): void {\n  const carrier = getMainCarrier();\n  if (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n    if (!carrier.__SENTRY__.extensions.startTransaction) {\n      carrier.__SENTRY__.extensions.startTransaction = startTransaction;\n    }\n    if (!carrier.__SENTRY__.extensions.startSpan) {\n      carrier.__SENTRY__.extensions.startSpan = startSpan;\n    }\n    if (!carrier.__SENTRY__.extensions.traceHeaders) {\n      carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n    }\n  }\n}\n"]}