{"version":3,"file":"bundle.min.js","sources":["../../types/src/loglevel.ts","../../types/src/severity.ts","../../types/src/status.ts","../../utils/src/polyfill.ts","../../utils/src/error.ts","../../utils/src/is.ts","../../utils/src/string.ts","../../utils/src/misc.ts","../../utils/src/logger.ts","../../utils/src/syncpromise.ts","../../utils/src/memo.ts","../../utils/src/object.ts","../../utils/src/promisebuffer.ts","../../utils/src/supports.ts","../../utils/src/instrument.ts","../../utils/src/dsn.ts","../../hub/src/scope.ts","../../hub/src/hub.ts","../../minimal/src/index.ts","../../core/src/api.ts","../../core/src/integration.ts","../../core/src/baseclient.ts","../../core/src/integrations/functiontostring.ts","../../core/src/transports/noop.ts","../../core/src/basebackend.ts","../../core/src/request.ts","../../core/src/integrations/inboundfilters.ts","../src/tracekit.ts","../src/parsers.ts","../src/eventbuilder.ts","../src/transports/base.ts","../src/transports/fetch.ts","../src/transports/xhr.ts","../src/backend.ts","../src/helpers.ts","../src/integrations/globalhandlers.ts","../src/integrations/trycatch.ts","../src/integrations/breadcrumbs.ts","../src/integrations/linkederrors.ts","../src/integrations/useragent.ts","../src/version.ts","../src/client.ts","../src/sdk.ts","../src/index.ts","../../core/src/sdk.ts"],"sourcesContent":["/** Console logging verbosity for the SDK. */\nexport enum LogLevel {\n  /** No logs will be generated. */\n  None = 0,\n  /** Only SDK internal errors will be logged. */\n  Error = 1,\n  /** Information useful for debugging the SDK will be logged. */\n  Debug = 2,\n  /** All SDK actions will be logged. */\n  Verbose = 3,\n}\n","/** JSDoc */\nexport enum Severity {\n  /** JSDoc */\n  Fatal = 'fatal',\n  /** JSDoc */\n  Error = 'error',\n  /** JSDoc */\n  Warning = 'warning',\n  /** JSDoc */\n  Log = 'log',\n  /** JSDoc */\n  Info = 'info',\n  /** JSDoc */\n  Debug = 'debug',\n  /** JSDoc */\n  Critical = 'critical',\n}\n// tslint:disable:completed-docs\n// tslint:disable:no-unnecessary-qualifier no-namespace\nexport namespace Severity {\n  /**\n   * Converts a string-based level into a {@link Severity}.\n   *\n   * @param level string representation of Severity\n   * @returns Severity\n   */\n  export function fromString(level: string): Severity {\n    switch (level) {\n      case 'debug':\n        return Severity.Debug;\n      case 'info':\n        return Severity.Info;\n      case 'warn':\n      case 'warning':\n        return Severity.Warning;\n      case 'error':\n        return Severity.Error;\n      case 'fatal':\n        return Severity.Fatal;\n      case 'critical':\n        return Severity.Critical;\n      case 'log':\n      default:\n        return Severity.Log;\n    }\n  }\n}\n","/** The status of an event. */\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent to Sentry successfully. */\n  Success = 'success',\n  /** The client is currently rate limited and will try again later. */\n  RateLimit = 'rate_limit',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error ocurred during submission. */\n  Failed = 'failed',\n}\n// tslint:disable:completed-docs\n// tslint:disable:no-unnecessary-qualifier no-namespace\nexport namespace Status {\n  /**\n   * Converts a HTTP status code into a {@link Status}.\n   *\n   * @param code The HTTP response status code.\n   * @returns The send status or {@link Status.Unknown}.\n   */\n  export function fromHttpCode(code: number): Status {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n}\n","export const setPrototypeOf =\n  Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties); // tslint:disable-line:no-unbound-method\n\n/**\n * setPrototypeOf polyfill using __proto__\n */\nfunction setProtoOf<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  // @ts-ignore\n  obj.__proto__ = proto;\n  return obj as TTarget & TProto;\n}\n\n/**\n * setPrototypeOf polyfill using mixin\n */\nfunction mixinProperties<TTarget extends object, TProto>(obj: TTarget, proto: TProto): TTarget & TProto {\n  for (const prop in proto) {\n    if (!obj.hasOwnProperty(prop)) {\n      // @ts-ignore\n      obj[prop] = proto[prop];\n    }\n  }\n\n  return obj as TTarget & TProto;\n}\n","import { setPrototypeOf } from './polyfill';\n\n/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    // tslint:disable:no-unsafe-any\n    this.name = new.target.prototype.constructor.name;\n    setPrototypeOf(this, new.target.prototype);\n  }\n}\n","/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: any): boolean {\n  switch (Object.prototype.toString.call(wat)) {\n    case '[object Error]':\n      return true;\n    case '[object Exception]':\n      return true;\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object ErrorEvent]';\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMError]';\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMException]';\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object String]';\n}\n\n/**\n * Checks whether given value's is a primitive (undefined, null, number, boolean, string)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: any): boolean {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object Object]';\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: any): boolean {\n  // tslint:disable-next-line:strict-type-predicates\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: any): boolean {\n  // tslint:disable-next-line:strict-type-predicates\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object RegExp]';\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): boolean {\n  // tslint:disable:no-unsafe-any\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n  // tslint:enable:no-unsafe-any\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: any): boolean {\n  // tslint:disable-next-line:no-unsafe-any\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    // tslint:disable-next-line:no-unsafe-any\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n","import { isRegExp, isString } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\n\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const ll = newLine.length;\n  if (ll <= 150) {\n    return newLine;\n  }\n  if (colno > ll) {\n    colno = ll; // tslint:disable-line:no-parameter-reassignment\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, ll);\n  if (end > ll - 5) {\n    end = ll;\n  }\n  if (end === ll) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < ll) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return (pattern as RegExp).test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n","import { Event, Integration, StackFrame, WrappedFunction } from '@sentry/types';\n\nimport { isString } from './is';\nimport { snipLine } from './string';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\nexport function dynamicRequire(mod: any, request: string): any {\n  // tslint:disable-next-line: no-unsafe-any\n  return mod.require(request);\n}\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // tslint:disable:strict-type-predicates\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (isNodeEnv()\n    ? global\n    : typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : fallbackGlobalObject) as T & SentryGlobal;\n}\n// tslint:enable:strict-type-predicates\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // tslint:disable-next-line:no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // tslint:disable-next-line:no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // tslint:disable-next-line:no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(\n  url: string,\n): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  if (event.message) {\n    return event.message;\n  }\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    const exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return `${exception.type}: ${exception.value}`;\n    }\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n  return event.event_id || '<unknown>';\n}\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/** JSDoc */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n  const levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  const originalConsole = global.console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  levels.forEach(level => {\n    if (level in global.console && (originalConsole[level] as WrappedFunction).__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level] as WrappedFunction;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n}\n\n/**\n * Adds exception mechanism to a given event.\n * @param event The event to modify.\n * @param mechanism Mechanism of the mechanism.\n * @hidden\n */\nexport function addExceptionMechanism(\n  event: Event,\n  mechanism: {\n    [key: string]: any;\n  } = {},\n): void {\n  // TODO: Use real type with `keyof Mechanism` thingy and maybe make it better?\n  try {\n    // @ts-ignore\n    // tslint:disable:no-non-null-assertion\n    event.exception!.values![0].mechanism = event.exception!.values![0].mechanism || {};\n    Object.keys(mechanism).forEach(key => {\n      // @ts-ignore\n      event.exception!.values![0].mechanism[key] = mechanism[key];\n    });\n  } catch (_oO) {\n    // no-empty\n  }\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown): string {\n  const elem = el as {\n    getAttribute(key: string): string; // tslint:disable-line:completed-docs\n    tagName?: string;\n    id?: string;\n    className?: string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n  if (elem.id) {\n    out.push(`#${elem.id}`);\n  }\n\n  className = elem.className;\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n    for (i = 0; i < classes.length; i++) {\n      out.push(`.${classes[i]}`);\n    }\n  }\n  const attrWhitelist = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < attrWhitelist.length; i++) {\n    key = attrWhitelist[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\nconst INITIAL_TIME = Date.now();\nlet prevNow = 0;\n\n/**\n * Cross platform compatible partial performance implementation\n */\ninterface CrossPlatformPerformance {\n  /**\n   * Returns the current timestamp in ms\n   */\n  now(): number;\n  timeOrigin: number;\n}\n\nconst performanceFallback: CrossPlatformPerformance = {\n  now(): number {\n    let now = Date.now() - INITIAL_TIME;\n    if (now < prevNow) {\n      now = prevNow;\n    }\n    prevNow = now;\n    return now;\n  },\n  timeOrigin: INITIAL_TIME,\n};\n\nexport const crossPlatformPerformance: CrossPlatformPerformance = (() => {\n  if (isNodeEnv()) {\n    try {\n      const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: CrossPlatformPerformance };\n      return perfHooks.performance;\n    } catch (_) {\n      return performanceFallback;\n    }\n  }\n\n  if (getGlobalObject<Window>().performance) {\n    // Polyfill for performance.timeOrigin.\n    //\n    // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n    // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n    // tslint:disable-next-line:strict-type-predicates\n    if (performance.timeOrigin === undefined) {\n      // As of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always a\n      // valid fallback. In the absence of a initial time provided by the browser, fallback to INITIAL_TIME.\n      // @ts-ignore\n      // tslint:disable-next-line:deprecation\n      performance.timeOrigin = (performance.timing && performance.timing.navigationStart) || INITIAL_TIME;\n    }\n  }\n\n  return getGlobalObject<Window>().performance || performanceFallback;\n})();\n\n/**\n * Returns a timestamp in seconds with milliseconds precision since the UNIX epoch calculated with the monotonic clock.\n */\nexport function timestampWithMs(): number {\n  return (crossPlatformPerformance.timeOrigin + crossPlatformPerformance.now()) / 1000;\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP = /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\nconst defaultRetryAfter = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param now current unix timestamp\n * @param header string representation of 'Retry-After' header\n */\nexport function parseRetryAfterHeader(now: number, header?: string | number | null): number {\n  if (!header) {\n    return defaultRetryAfter;\n  }\n\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return defaultRetryAfter;\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  const lineno = frame.lineno || 0;\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  frame.context_line = snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n","import { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n","import { isThenable } from './is';\n\n/** SyncPromise internal states */\nenum States {\n  /** Pending */\n  PENDING = 'PENDING',\n  /** Resolved / OK */\n  RESOLVED = 'RESOLVED',\n  /** Rejected / Error */\n  REJECTED = 'REJECTED',\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<{\n    done: boolean;\n    onfulfilled?: ((value: T) => T | PromiseLike<T>) | null;\n    onrejected?: ((reason: any) => any) | null;\n  }> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public toString(): string {\n    return '[object SyncPromise]';\n  }\n\n  /** JSDoc */\n  public static resolve<T>(value: T | PromiseLike<T>): PromiseLike<T> {\n    return new SyncPromise(resolve => {\n      resolve(value);\n    });\n  }\n\n  /** JSDoc */\n  public static reject<T = never>(reason?: any): PromiseLike<T> {\n    return new SyncPromise((_, reject) => {\n      reject(reason);\n    });\n  }\n\n  /** JSDoc */\n  public static all<U = any>(collection: Array<U | PromiseLike<U>>): PromiseLike<U[]> {\n    return new SyncPromise<U[]>((resolve, reject) => {\n      if (!Array.isArray(collection)) {\n        reject(new TypeError(`Promise.all requires an array as input.`));\n        return;\n      }\n\n      if (collection.length === 0) {\n        resolve([]);\n        return;\n      }\n\n      let counter = collection.length;\n      const resolvedCollection: U[] = [];\n\n      collection.forEach((item, index) => {\n        SyncPromise.resolve(item)\n          .then(value => {\n            resolvedCollection[index] = value;\n            counter -= 1;\n\n            if (counter !== 0) {\n              return;\n            }\n            resolve(resolvedCollection);\n          })\n          .then(null, reject);\n      });\n    });\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._attachHandler({\n        done: false,\n        onfulfilled: result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n            return;\n          }\n          try {\n            resolve(onfulfilled(result));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n        onrejected: reason => {\n          if (!onrejected) {\n            reject(reason);\n            return;\n          }\n          try {\n            resolve(onrejected(reason));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n      });\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve((val as unknown) as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  // TODO: FIXME\n  /** JSDoc */\n  private readonly _attachHandler = (handler: {\n    /** JSDoc */\n    done: boolean;\n    /** JSDoc */\n    onfulfilled?(value: T): any;\n    /** JSDoc */\n    onrejected?(reason: any): any;\n  }) => {\n    this._handlers = this._handlers.concat(handler);\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler.done) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        if (handler.onfulfilled) {\n          handler.onfulfilled((this._value as unknown) as any);\n        }\n      }\n\n      if (this._state === States.REJECTED) {\n        if (handler.onrejected) {\n          handler.onrejected(this._value);\n        }\n      }\n\n      handler.done = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n","// tslint:disable:no-unsafe-any\n/**\n * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.\n */\nexport class Memo {\n  /** Determines if WeakSet is available */\n  private readonly _hasWeakSet: boolean;\n  /** Either WeakSet or Array */\n  private readonly _inner: any;\n\n  public constructor() {\n    // tslint:disable-next-line\n    this._hasWeakSet = typeof WeakSet === 'function';\n    this._inner = this._hasWeakSet ? new WeakSet() : [];\n  }\n\n  /**\n   * Sets obj to remember.\n   * @param obj Object to remember\n   */\n  public memoize(obj: any): boolean {\n    if (this._hasWeakSet) {\n      if (this._inner.has(obj)) {\n        return true;\n      }\n      this._inner.add(obj);\n      return false;\n    }\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < this._inner.length; i++) {\n      const value = this._inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    this._inner.push(obj);\n    return false;\n  }\n\n  /**\n   * Removes object from internal storage.\n   * @param obj Object to forget\n   */\n  public unmemoize(obj: any): void {\n    if (this._hasWeakSet) {\n      this._inner.delete(obj);\n    } else {\n      for (let i = 0; i < this._inner.length; i++) {\n        if (this._inner[i] === obj) {\n          this._inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n}\n","import { ExtendedError, WrappedFunction } from '@sentry/types';\n\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive, isSyntheticEvent } from './is';\nimport { Memo } from './memo';\nimport { getFunctionName, htmlTreeAsString } from './misc';\nimport { truncate } from './string';\n\n/**\n * Wrap a given object method with a higher-order function\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacement A function that should be used to wrap a given method.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacement: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacement(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof wrapped === 'function') {\n    try {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __sentry_original__: {\n          enumerable: false,\n          value: original,\n        },\n      });\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(\n      // tslint:disable-next-line:no-unsafe-any\n      key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`,\n    )\n    .join('&');\n}\n\n/**\n * Transforms any object into an object literal with all it's attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order to be usable by the serializer\n */\nfunction getWalkSource(\n  value: any,\n): {\n  [key: string]: any;\n} {\n  if (isError(value)) {\n    const error = value as ExtendedError;\n    const err: {\n      stack: string | undefined;\n      message: string;\n      name: string;\n      [key: string]: any;\n    } = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n    };\n\n    for (const i in error) {\n      if (Object.prototype.hasOwnProperty.call(error, i)) {\n        err[i] = error[i];\n      }\n    }\n\n    return err;\n  }\n\n  if (isEvent(value)) {\n    /**\n     * Event-like interface that's usable in browser and node\n     */\n    interface SimpleEvent {\n      [key: string]: unknown;\n      type: string;\n      target?: unknown;\n      currentTarget?: unknown;\n    }\n\n    const event = value as SimpleEvent;\n\n    const source: {\n      [key: string]: any;\n    } = {};\n\n    source.type = event.type;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      source.target = isElement(event.target)\n        ? htmlTreeAsString(event.target)\n        : Object.prototype.toString.call(event.target);\n    } catch (_oO) {\n      source.target = '<unknown>';\n    }\n\n    try {\n      source.currentTarget = isElement(event.currentTarget)\n        ? htmlTreeAsString(event.currentTarget)\n        : Object.prototype.toString.call(event.currentTarget);\n    } catch (_oO) {\n      source.currentTarget = '<unknown>';\n    }\n\n    // tslint:disable-next-line:strict-type-predicates\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      source.detail = event.detail;\n    }\n\n    for (const i in event) {\n      if (Object.prototype.hasOwnProperty.call(event, i)) {\n        source[i] = event;\n      }\n    }\n\n    return source;\n  }\n\n  return value as {\n    [key: string]: any;\n  };\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // tslint:disable-next-line:no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized as T;\n}\n\n/** Transforms any input value into a string form, either primitive value or a type of the input */\nfunction serializeValue(value: any): any {\n  const type = Object.prototype.toString.call(value);\n\n  // Node.js REPL notation\n  if (typeof value === 'string') {\n    return value;\n  }\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  const normalized = normalizeValue(value);\n  return isPrimitive(normalized) ? normalized : type;\n}\n\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\n// tslint:disable-next-line:cyclomatic-complexity\nfunction normalizeValue<T>(value: T, key?: any): T | string {\n  if (key === 'domain' && value && typeof value === 'object' && ((value as unknown) as { _events: any })._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof (global as any) !== 'undefined' && (value as unknown) === global) {\n    return '[Global]';\n  }\n\n  if (typeof (window as any) !== 'undefined' && (value as unknown) === window) {\n    return '[Window]';\n  }\n\n  if (typeof (document as any) !== 'undefined' && (value as unknown) === document) {\n    return '[Document]';\n  }\n\n  // React's SyntheticEvent thingy\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  // tslint:disable-next-line:no-tautology-expression\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return `[Function: ${getFunctionName(value)}]`;\n  }\n\n  return value;\n}\n\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\nexport function walk(key: string, value: any, depth: number = +Infinity, memo: Memo = new Memo()): any {\n  // If we reach the maximum depth, serialize whatever has left\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n\n  // If value implements `toJSON` method, call it and return early\n  // tslint:disable:no-unsafe-any\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n  // tslint:enable:no-unsafe-any\n\n  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n  const normalized = normalizeValue(value, key);\n  if (isPrimitive(normalized)) {\n    return normalized;\n  }\n\n  // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n  const source = getWalkSource(value);\n\n  // Create an accumulator that will act as a parent for all future itterations of that branch\n  const acc = Array.isArray(value) ? [] : {};\n\n  // If we already walked that branch, bail out, as it's circular reference\n  if (memo.memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // Walk all keys of the source\n  for (const innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    }\n    // Recursively walk through all the child nodes\n    (acc as { [key: string]: any })[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n  }\n\n  // Once walked through all the branches, remove the parent from memo storage\n  memo.unmemoize(value);\n\n  // Return accumulated values\n  return acc;\n}\n\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\nexport function normalize(input: any, depth?: number): any {\n  try {\n    // tslint:disable-next-line:no-unsafe-any\n    return JSON.parse(JSON.stringify(input, (key: string, value: any) => walk(key, value, depth)));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: any, maxLength: number = 40): string {\n  // tslint:disable:strict-type-predicates\n  const keys = Object.keys(getWalkSource(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\nexport function dropUndefinedKeys<T>(val: T): T {\n  if (isPlainObject(val)) {\n    const obj = val as { [key: string]: any };\n    const rv: { [key: string]: any } = {};\n    for (const key of Object.keys(obj)) {\n      if (typeof obj[key] !== 'undefined') {\n        rv[key] = dropUndefinedKeys(obj[key]);\n      }\n    }\n    return rv as T;\n  }\n\n  if (Array.isArray(val)) {\n    return val.map(dropUndefinedKeys) as any;\n  }\n\n  return val;\n}\n","import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  public constructor(protected _limit?: number) {}\n\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<PromiseLike<T>> = [];\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns The original promise.\n   */\n  public add(task: PromiseLike<T>): PromiseLike<T> {\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    task\n      .then(() => this.remove(task))\n      .then(null, () =>\n        this.remove(task).then(null, () => {\n          // We have to add this catch here otherwise we have an unhandledPromiseRejection\n          // because it's a new Promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  public remove(task: PromiseLike<T>): PromiseLike<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      SyncPromise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .then(null, () => {\n          resolve(true);\n        });\n    });\n  }\n}\n","import { logger } from './logger';\nimport { getGlobalObject } from './misc';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    // tslint:disable:no-unused-expression\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // It really needs 1 argument, not 0.\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore\n    // tslint:disable:no-unused-expression\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    // tslint:disable:no-unused-expression\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    // tslint:disable-next-line:no-unused-expression\n    new Headers();\n    // tslint:disable-next-line:no-unused-expression\n    new Request('');\n    // tslint:disable-next-line:no-unused-expression\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n/**\n * isNativeFetch checks if the given function is a native implementation of fetch()\n */\nfunction isNativeFetch(func: Function): boolean {\n  return func && /^function fetch\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  const global = getGlobalObject<Window>();\n\n  // Fast path to avoid DOM I/O\n  // tslint:disable-next-line:no-unbound-method\n  if (isNativeFetch(global.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = global.document;\n  // tslint:disable-next-line:no-unbound-method deprecation\n  if (doc && typeof (doc.createElement as unknown) === `function`) {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // tslint:disable-next-line:no-unbound-method\n        result = isNativeFetch(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  // tslint:disable-next-line: no-unsafe-any\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    // tslint:disable:no-unused-expression\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  const chrome = (global as any).chrome;\n  // tslint:disable-next-line:no-unsafe-any\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","/* tslint:disable:only-arrow-functions no-unsafe-any */\n\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isInstanceOf, isString } from './is';\nimport { logger } from './logger';\nimport { getFunctionName, getGlobalObject } from './misc';\nimport { fill } from './object';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\n/** Object describing handler that will be triggered for a given `type` of instrumentation */\ninterface InstrumentHandler {\n  type: InstrumentHandlerType;\n  callback: InstrumentHandlerCallback;\n}\ntype InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\ntype InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      logger.warn('unknown instrumentation type:', type);\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(handler: InstrumentHandler): void {\n  // tslint:disable-next-line:strict-type-predicates\n  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {\n    return;\n  }\n  handlers[handler.type] = handlers[handler.type] || [];\n  (handlers[handler.type] as InstrumentHandlerCallback[]).push(handler.callback);\n  instrument(handler.type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      logger.error(\n        `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(\n          handler,\n        )}\\nError: ${e}`,\n      );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function(level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function(originalConsoleLevel: () => any): Function {\n      return function(...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function(originalFetch: () => void): () => void {\n    return function(...args: any[]): void {\n      const commonHandlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...commonHandlerData,\n      });\n\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...commonHandlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...commonHandlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          throw error;\n        },\n      );\n    };\n  });\n}\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n  };\n}\n\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function(originalOpen: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      const xhr = this; // tslint:disable-line:no-this-assignment\n      const url = args[1];\n      xhr.__sentry_xhr__ = {\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      if (isString(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function(): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            if (xhr.__sentry_xhr__) {\n              xhr.__sentry_xhr__.status_code = xhr.status;\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function(original: WrappedFunction): Function {\n          return function(...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function(originalSend: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function(this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      return oldOnPopState.apply(this, args);\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function(this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n  // to the document. Do this before we instrument addEventListener.\n  global.document.addEventListener('click', domEventHandler('click', triggerHandlers.bind(null, 'dom')), false);\n  global.document.addEventListener('keypress', keypressEventHandler(triggerHandlers.bind(null, 'dom')), false);\n\n  // After hooking into document bubbled up click and keypresses events, we also hook into user handled click & keypresses.\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (\n      eventName: string,\n      fn: EventListenerOrEventListenerObject,\n      options?: boolean | AddEventListenerOptions,\n    ) => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerOrEventListenerObject, capture?: boolean, secure?: boolean) => void {\n        if (fn && (fn as EventListenerObject).handleEvent) {\n          if (eventName === 'click') {\n            fill(fn, 'handleEvent', function(innerOriginal: () => void): (caughtEvent: Event) => void {\n              return function(this: any, event: Event): (event: Event) => void {\n                domEventHandler('click', triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n          if (eventName === 'keypress') {\n            fill(fn, 'handleEvent', function(innerOriginal: () => void): (caughtEvent: Event) => void {\n              return function(this: any, event: Event): (event: Event) => void {\n                keypressEventHandler(triggerHandlers.bind(null, 'dom'))(event);\n                return innerOriginal.call(this, event);\n              };\n            });\n          }\n        } else {\n          if (eventName === 'click') {\n            domEventHandler('click', triggerHandlers.bind(null, 'dom'), true)(this);\n          }\n          if (eventName === 'keypress') {\n            keypressEventHandler(triggerHandlers.bind(null, 'dom'))(this);\n          }\n        }\n\n        return original.call(this, eventName, fn, options);\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      original: () => void,\n    ): (\n      this: any,\n      eventName: string,\n      fn: EventListenerOrEventListenerObject,\n      options?: boolean | EventListenerOptions,\n    ) => () => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerOrEventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        let callback = fn as WrappedFunction;\n        try {\n          callback = callback && (callback.__sentry_wrapped__ || callback);\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return original.call(this, eventName, callback, options);\n      };\n    });\n  });\n}\n\nconst debounceDuration: number = 1000;\nlet debounceTimer: number = 0;\nlet keypressTimeout: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param name the event name (e.g. \"click\")\n * @param handler function that will be triggered\n * @param debounce decides whether it should wait till another event loop\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction domEventHandler(name: string, handler: Function, debounce: boolean = false): (event: Event) => void {\n  return (event: Event) => {\n    // reset keypress timeout; e.g. triggering a 'click' after\n    // a 'keypress' will reset the keypress debounce so that a new\n    // set of keypresses can be recorded\n    keypressTimeout = undefined;\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors). Ignore if we've\n    // already captured the event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    lastCapturedEvent = event;\n\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n\n    if (debounce) {\n      debounceTimer = setTimeout(() => {\n        handler({ event, name });\n      });\n    } else {\n      handler({ event, name });\n    }\n  };\n}\n\n/**\n * Wraps addEventListener to capture keypress UI events\n * @param handler function that will be triggered\n * @returns wrapped keypress events handler\n * @hidden\n */\nfunction keypressEventHandler(handler: Function): (event: Event) => void {\n  // TODO: if somehow user switches keypress target before\n  //       debounce timeout is triggered, we will only capture\n  //       a single breadcrumb from the FIRST target (acceptable?)\n  return (event: Event) => {\n    let target;\n\n    try {\n      target = event.target;\n    } catch (e) {\n      // just accessing event properties can throw an exception in some rare circumstances\n      // see: https://github.com/getsentry/raven-js/issues/838\n      return;\n    }\n\n    const tagName = target && (target as HTMLElement).tagName;\n\n    // only consider keypress events on actual input elements\n    // this will disregard keypresses targeting body (e.g. tabbing\n    // through elements, hotkeys, etc)\n    if (!tagName || (tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !(target as HTMLElement).isContentEditable)) {\n      return;\n    }\n\n    // record first keypress in a series, but ignore subsequent\n    // keypresses until debounce clears\n    if (!keypressTimeout) {\n      domEventHandler('input', handler)(event);\n    }\n    clearTimeout(keypressTimeout);\n\n    keypressTimeout = (setTimeout(() => {\n      keypressTimeout = undefined;\n    }, debounceDuration) as any) as number;\n  };\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function(msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function(e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w\\.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Error message */\nconst ERROR_MESSAGE = 'Invalid Dsn';\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key. */\n  public user!: string;\n  /** Private authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    // tslint:disable-next-line:no-this-assignment\n    const { host, path, pass, port, projectId, protocol, user } = this;\n    return (\n      `${protocol}://${user}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private _fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    const [protocol, user, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n\n    if (projectId) {\n      const projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, user });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private _fromComponents(components: DsnComponents): void {\n    this.protocol = components.protocol;\n    this.user = components.user;\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private _validate(): void {\n    ['protocol', 'user', 'host', 'projectId'].forEach(component => {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(`${ERROR_MESSAGE}: ${component} missing`);\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid projectId ${this.projectId}`);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid protocol ${this.protocol}`);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid port ${this.port}`);\n    }\n  }\n}\n","import {\n  Breadcrumb,\n  CaptureContext,\n  Event,\n  EventHint,\n  EventProcessor,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Severity,\n  Span,\n  User,\n} from '@sentry/types';\nimport { getGlobalObject, isPlainObject, isThenable, SyncPromise, timestampWithMs } from '@sentry/utils';\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifiying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: string } = {};\n\n  /** Extra */\n  protected _extra: { [key: string]: any } = {};\n\n  /** Contexts */\n  protected _contexts: { [key: string]: any } = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction */\n  protected _transaction?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      setTimeout(() => {\n        this._scopeListeners.forEach(callback => {\n          callback(this);\n        });\n        this._notifyingListeners = false;\n      });\n    }\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      // tslint:disable-next-line:strict-type-predicates\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          (result as PromiseLike<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: string }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: { [key: string]: any }): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: any): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransaction(transaction?: string): this {\n    this._transaction = transaction;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: { [key: string]: any } | null): this {\n    this._contexts = { ...this._contexts, [key]: context };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Internal getter for Span, used in Hub.\n   * @hidden\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._transaction = scope._transaction;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n    }\n    return newScope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as (<T>(scope: T) => T))(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // tslint:disable-next-line:no-parameter-reassignment\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transaction = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const mergedBreadcrumb = {\n      timestamp: timestampWithMs(),\n      ...breadcrumb,\n    };\n\n    this._breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this._breadcrumbs, mergedBreadcrumb].slice(-maxBreadcrumbs)\n        : [...this._breadcrumbs, mergedBreadcrumb];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transaction) {\n      event.transaction = this._transaction;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n}\n\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  const global = getGlobalObject<Window | NodeJS.Global>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","import {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  Event,\n  EventHint,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Severity,\n  Span,\n  SpanContext,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport { consoleSandbox, getGlobalObject, isNodeEnv, logger, timestampWithMs, uuid4 } from '@sentry/utils';\n\nimport { Carrier, Layer } from './interfaces';\nimport { Scope } from './scope';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be incresed when the global interface\n * changes a and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 3;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Absolute maximum number of breadcrumbs added to an event. The\n * `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this._stack.push({ client, scope });\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  private _invokeClient<M extends keyof Client>(method: M, ...args: any[]): void {\n    const top = this.getStackTop();\n    if (top && top.client && top.client[method]) {\n      (top.client as any)[method](...args, top.scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const stack = this.getStack();\n    const parentScope = stack.length > 0 ? stack[stack.length - 1].scope : undefined;\n    const scope = Scope.clone(parentScope);\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    return this.getStack().pop() !== undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error('Sentry syntheticException');\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: exception,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureException', exception, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    let finalHint = hint;\n\n    // If there's no explicit hint provided, mimick the same thing that would happen\n    // in the minimal itself to create a consistent behavior.\n    // We don't do this in the client, as it's the lowest level API, and doing this,\n    // would prevent user from having full control over direct calls.\n    if (!hint) {\n      let syntheticException: Error;\n      try {\n        throw new Error(message);\n      } catch (exception) {\n        syntheticException = exception as Error;\n      }\n      finalHint = {\n        originalException: message,\n        syntheticException,\n      };\n    }\n\n    this._invokeClient('captureMessage', message, level, {\n      ...finalHint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    this._invokeClient('captureEvent', event, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const top = this.getStackTop();\n\n    if (!top.scope || !top.client) {\n      return;\n    }\n\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (top.client.getOptions && top.client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) {\n      return;\n    }\n\n    const timestamp = timestampWithMs();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) {\n      return;\n    }\n\n    top.scope.addBreadcrumb(finalBreadcrumb, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: string }): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: { [key: string]: any }): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: any): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const top = this.getStackTop();\n    if (top.scope && top.client) {\n      callback(top.scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) {\n      return null;\n    }\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSpan(context: SpanContext): Span {\n    return this._callExtensionMethod('startSpan', context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext): Transaction {\n    return this._callExtensionMethod('startTransaction', context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    // tslint:disable-next-line: strict-type-predicates\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/** Returns the global shim registry. */\nexport function getMainCarrier(): Carrier {\n  const carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Try to read the hub from an active domain, fallback to the registry if one doesnt exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    const property = 'domain';\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    // tslint:disable-next-line: strict-type-predicates\n    if (!sentry || !sentry.extensions || !sentry.extensions[property]) {\n      return getHubFromCarrier(registry);\n    }\n    const domain = sentry.extensions[property] as any;\n    const activeDomain = domain.active;\n\n    // If there no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or its an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {\n    return carrier.__SENTRY__.hub;\n  }\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = new Hub();\n  return carrier.__SENTRY__.hub;\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) {\n    return false;\n  }\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = hub;\n  return true;\n}\n","import { getCurrentHub, Hub, Scope } from '@sentry/hub';\nimport { Breadcrumb, CaptureContext, Event, Severity, Transaction, TransactionContext, User } from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\nfunction callOnHub<T>(method: string, ...args: any[]): T {\n  const hub = getCurrentHub();\n  if (hub && hub[method as keyof Hub]) {\n    // tslint:disable-next-line:no-unsafe-any\n    return (hub[method as keyof Hub] as any)(...args);\n  }\n  throw new Error(`No hub defined or ${method} was not found on the hub, please open a bug report.`);\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\nexport function captureException(exception: any, captureContext?: CaptureContext): string {\n  let syntheticException: Error;\n  try {\n    throw new Error('Sentry syntheticException');\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureException', exception, {\n    captureContext,\n    originalException: exception,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param level Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message: string, captureContext?: CaptureContext | Severity): string {\n  let syntheticException: Error;\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arrity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException,\n    ...context,\n  });\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event): string {\n  return callOnHub('captureEvent', event);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('configureScope', callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub<void>('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\nexport function setContext(name: string, context: { [key: string]: any } | null): void {\n  callOnHub<void>('setContext', name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: { [key: string]: any }): void {\n  callOnHub<void>('setExtras', extras);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: string }): void {\n  callOnHub<void>('setTags', tags);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\n\nexport function setExtra(key: string, extra: any): void {\n  callOnHub<void>('setExtra', key, extra);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n * @param key String key of tag\n * @param value String value of tag\n */\nexport function setTag(key: string, value: string): void {\n  callOnHub<void>('setTag', key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  callOnHub<void>('setUser', user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('withScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub<void>('_invokeClient', method, ...args);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual\n * tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and\n * child spans to other spans. To start a new child span within the transaction\n * or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished,\n * otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at\n * which point the transaction with all its finished child spans will be sent to\n * Sentry.\n *\n * @param context Properties of the new `Transaction`.\n */\nexport function startTransaction(context: TransactionContext): Transaction {\n  return callOnHub('startTransaction', { ...context });\n}\n","import { DsnLike } from '@sentry/types';\nimport { Dsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Helper class to provide urls to different Sentry endpoints. */\nexport class API {\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n  /** Create a new instance of API */\n  public constructor(public dsn: DsnLike) {\n    this._dsnObject = new Dsn(dsn);\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    const dsn = this._dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return this._getIngestEndpoint('store');\n  }\n\n  /** Returns the envelope endpoint URL. */\n  private _getEnvelopeEndpoint(): string {\n    return this._getIngestEndpoint('envelope');\n  }\n\n  /** Returns the ingest API endpoint for target. */\n  private _getIngestEndpoint(target: 'store' | 'envelope'): string {\n    const base = this.getBaseApiEndpoint();\n    const dsn = this._dsnObject;\n    return `${base}${dsn.projectId}/${target}/`;\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return `${this.getStoreEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return `${this._getEnvelopeEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  private _encodedAuth(): string {\n    const dsn = this._dsnObject;\n    const auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    return urlEncode(auth);\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this._dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    const dsn = this._dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.user}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this._dsnObject;\n    const endpoint = `${this.getBaseApiEndpoint()}embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport interface IntegrationIndex {\n  [key: string]: Integration;\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n  let integrations: Integration[] = [];\n  if (Array.isArray(userIntegrations)) {\n    const userIntegrationsNames = userIntegrations.map(i => i.name);\n    const pickedIntegrationsNames: string[] = [];\n\n    // Leave only unique default integrations, that were not overridden with provided user integrations\n    defaultIntegrations.forEach(defaultIntegration => {\n      if (\n        userIntegrationsNames.indexOf(defaultIntegration.name) === -1 &&\n        pickedIntegrationsNames.indexOf(defaultIntegration.name) === -1\n      ) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames.push(defaultIntegration.name);\n      }\n    });\n\n    // Don't add same user integration twice\n    userIntegrations.forEach(userIntegration => {\n      if (pickedIntegrationsNames.indexOf(userIntegration.name) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames.push(userIntegration.name);\n      }\n    });\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    integrations = [...defaultIntegrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}\n","import { Scope } from '@sentry/hub';\nimport { Client, Event, EventHint, Integration, IntegrationClass, Options, Severity } from '@sentry/types';\nimport {\n  Dsn,\n  isPrimitive,\n  isThenable,\n  logger,\n  normalize,\n  SyncPromise,\n  timestampWithMs,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: Dsn;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Is the client still processing a call? */\n  protected _processing: boolean = false;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    this._getBackend()\n      .eventFromException(exception, hint)\n      .then(event => {\n        eventId = this.captureEvent(event, hint, scope);\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(`${message}`, level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    promisedEvent.then(event => {\n      eventId = this.captureEvent(event, hint, scope);\n    });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    this._processEvent(event, hint, scope)\n      .then(finalEvent => {\n        // We need to check for finalEvent in case beforeSend returned null\n        eventId = finalEvent && finalEvent.event_id;\n        this._processing = false;\n      })\n      .then(null, reason => {\n        logger.error(reason);\n        this._processing = false;\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientProcessing(timeout).then(status => {\n      clearInterval(status.interval);\n      return this._getBackend()\n        .getTransport()\n        .close(timeout)\n        .then(transportFlushed => status.ready && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled()) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Waits for the client to be done with processing. */\n  protected _isClientProcessing(timeout?: number): PromiseLike<{ ready: boolean; interval: number }> {\n    return new SyncPromise<{ ready: boolean; interval: number }>(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      let interval = 0;\n      clearInterval(interval);\n\n      interval = (setInterval(() => {\n        if (!this._processing) {\n          resolve({\n            interval,\n            ready: true,\n          });\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            resolve({\n              interval,\n              ready: false,\n            });\n          }\n        }\n      }, tick) as unknown) as number;\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || timestampWithMs(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = SyncPromise.resolve<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      // tslint:disable-next-line:strict-type-predicates\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    // tslint:disable:no-unsafe-any\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      normalized.contexts.trace = event.contexts.trace;\n    }\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const { environment, release, dist, maxValueLength = 250 } = this.getOptions();\n\n    if (event.environment === undefined && environment !== undefined) {\n      event.environment = environment;\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const sdkInfo = event.sdk;\n    const integrationsArray = Object.keys(this._integrations);\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    const { beforeSend, sampleRate } = this.getOptions();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject('SDK not enabled, will not send event.');\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject('This event has been sampled, will not send event.');\n    }\n\n    return new SyncPromise((resolve, reject) => {\n      this._prepareEvent(event, scope, hint)\n        .then(prepared => {\n          if (prepared === null) {\n            reject('An event processor returned null, will not send event.');\n            return;\n          }\n\n          let finalEvent: Event | null = prepared;\n\n          const isInternalException = hint && hint.data && (hint.data as { [key: string]: any }).__sentry__ === true;\n          // We skip beforeSend in case of transactions\n          if (isInternalException || !beforeSend || isTransaction) {\n            this._sendEvent(finalEvent);\n            resolve(finalEvent);\n            return;\n          }\n\n          const beforeSendResult = beforeSend(prepared, hint);\n          // tslint:disable-next-line:strict-type-predicates\n          if (typeof beforeSendResult === 'undefined') {\n            logger.error('`beforeSend` method has to return `null` or a valid event.');\n          } else if (isThenable(beforeSendResult)) {\n            this._handleAsyncBeforeSend(beforeSendResult as PromiseLike<Event | null>, resolve, reject);\n          } else {\n            finalEvent = beforeSendResult as Event | null;\n\n            if (finalEvent === null) {\n              logger.log('`beforeSend` returned `null`, will not send event.');\n              resolve(null);\n              return;\n            }\n\n            // From here on we are really async\n            this._sendEvent(finalEvent);\n            resolve(finalEvent);\n          }\n        })\n        .then(null, reason => {\n          this.captureException(reason, {\n            data: {\n              __sentry__: true,\n            },\n            originalException: reason as Error,\n          });\n          reject(\n            `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n          );\n        });\n    });\n  }\n\n  /**\n   * Resolves before send Promise and calls resolve/reject on parent SyncPromise.\n   */\n  private _handleAsyncBeforeSend(\n    beforeSend: PromiseLike<Event | null>,\n    resolve: (event: Event) => void,\n    reject: (reason: string) => void,\n  ): void {\n    beforeSend\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          reject('`beforeSend` returned `null`, will not send event.');\n          return;\n        }\n        // From here on we are really async\n        this._sendEvent(processedEvent);\n        resolve(processedEvent);\n      })\n      .then(null, e => {\n        reject(`beforeSend rejected with ${e}`);\n      });\n  }\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    originalFunctionToString = Function.prototype.toString;\n\n    Function.prototype.toString = function(this: WrappedFunction, ...args: any[]): string {\n      const context = this.__sentry_original__ || this;\n      // tslint:disable-next-line:no-unsafe-any\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","import { Event, Response, Status, Transport } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\n/** Noop transport */\nexport class NoopTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    return SyncPromise.resolve({\n      reason: `NoopTransport: Event has been skipped because no Dsn is configured.`,\n      status: Status.Skipped,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(_?: number): PromiseLike<boolean> {\n    return SyncPromise.resolve(true);\n  }\n}\n","import { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { logger, SentryError } from '@sentry/utils';\n\nimport { NoopTransport } from './transports/noop';\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instanciate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}.\n * @hidden\n */\nexport interface Backend {\n  /** Creates a {@link Event} from an exception. */\n  eventFromException(exception: any, hint?: EventHint): PromiseLike<Event>;\n\n  /** Creates a {@link Event} from a plain message. */\n  eventFromMessage(message: string, level?: Severity, hint?: EventHint): PromiseLike<Event>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: Event): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n\n/**\n * A class object that can instanciate Backend objects.\n * @hidden\n */\nexport type BackendClass<B extends Backend, O extends Options> = new (options: O) => B;\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** Cached transport used internally. */\n  protected _transport: Transport;\n\n  /** Creates a new backend instance. */\n  public constructor(options: O) {\n    this._options = options;\n    if (!this._options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this._transport = this._setupTransport();\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected _setupTransport(): Transport {\n    return new NoopTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(_message: string, _level?: Severity, _hint?: EventHint): PromiseLike<Event> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    this._transport.sendEvent(event).then(null, reason => {\n      logger.error(`Error while sending event: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._transport;\n  }\n}\n","import { Event } from '@sentry/types';\nimport { timestampWithMs } from '@sentry/utils';\n\nimport { API } from './api';\n\n/** A generic client request. */\ninterface SentryRequest {\n  body: string;\n  url: string;\n  // headers would contain auth & content-type headers for @sentry/node, but\n  // since @sentry/browser avoids custom headers to prevent CORS preflight\n  // requests, we can use the same approach for @sentry/browser and @sentry/node\n  // for simplicity -- no headers involved.\n  // headers: { [key: string]: string };\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: API): SentryRequest {\n  const useEnvelope = event.type === 'transaction';\n\n  const req: SentryRequest = {\n    body: JSON.stringify(event),\n    url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth(),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = JSON.stringify({\n      event_id: event.event_id,\n      // We need to add * 1000 since we divide it by 1000 by default but JS works with ms precision\n      // The reason we use timestampWithMs here is that all clocks across the SDK use the same clock\n      sent_at: new Date(timestampWithMs() * 1000).toISOString(),\n    });\n    const itemHeaders = JSON.stringify({\n      type: event.type,\n      // The content-type is assumed to be 'application/json' and not part of\n      // the current spec for transaction items, so we don't bloat the request\n      // body with it.\n      //\n      // content_type: 'application/json',\n      //\n      // The length is optional. It must be the number of bytes in req.Body\n      // encoded as UTF-8. Since the server can figure this out and would\n      // otherwise refuse events that report the length incorrectly, we decided\n      // not to send the length to avoid problems related to reporting the wrong\n      // size and to reduce request body size.\n      //\n      // length: new TextEncoder().encode(req.body).length,\n    });\n    // The trailing newline is optional. We intentionally don't send it to avoid\n    // sending unnecessary bytes.\n    //\n    // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n    const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}`;\n    req.body = envelope;\n  }\n\n  return req;\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Event, Integration } from '@sentry/types';\nimport { getEventDescription, isMatchingPattern, logger } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** JSDoc */\ninterface InboundFiltersOptions {\n  blacklistUrls?: Array<string | RegExp>;\n  ignoreErrors?: Array<string | RegExp>;\n  ignoreInternal?: boolean;\n  whitelistUrls?: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  public constructor(private readonly _options: InboundFiltersOptions = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      const hub = getCurrentHub();\n      if (!hub) {\n        return event;\n      }\n      const self = hub.getIntegration(InboundFilters);\n      if (self) {\n        const client = hub.getClient();\n        const clientOptions = client ? client.getOptions() : {};\n        const options = self._mergeOptions(clientOptions);\n        if (self._shouldDropEvent(event, options)) {\n          return null;\n        }\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  private _shouldDropEvent(event: Event, options: InboundFiltersOptions): boolean {\n    if (this._isSentryError(event, options)) {\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n      return true;\n    }\n    if (this._isIgnoredError(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n      return true;\n    }\n    if (this._isBlacklistedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`blacklistUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    if (!this._isWhitelistedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to not being matched by \\`whitelistUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /** JSDoc */\n  private _isSentryError(event: Event, options: InboundFiltersOptions = {}): boolean {\n    if (!options.ignoreInternal) {\n      return false;\n    }\n\n    try {\n      return (\n        (event &&\n          event.exception &&\n          event.exception.values &&\n          event.exception.values[0] &&\n          event.exception.values[0].type === 'SentryError') ||\n        false\n      );\n    } catch (_oO) {\n      return false;\n    }\n  }\n\n  /** JSDoc */\n  private _isIgnoredError(event: Event, options: InboundFiltersOptions = {}): boolean {\n    if (!options.ignoreErrors || !options.ignoreErrors.length) {\n      return false;\n    }\n\n    return this._getPossibleEventMessages(event).some(message =>\n      // Not sure why TypeScript complains here...\n      (options.ignoreErrors as Array<RegExp | string>).some(pattern => isMatchingPattern(message, pattern)),\n    );\n  }\n\n  /** JSDoc */\n  private _isBlacklistedUrl(event: Event, options: InboundFiltersOptions = {}): boolean {\n    // TODO: Use Glob instead?\n    if (!options.blacklistUrls || !options.blacklistUrls.length) {\n      return false;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? false : options.blacklistUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _isWhitelistedUrl(event: Event, options: InboundFiltersOptions = {}): boolean {\n    // TODO: Use Glob instead?\n    if (!options.whitelistUrls || !options.whitelistUrls.length) {\n      return true;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? true : options.whitelistUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _mergeOptions(clientOptions: InboundFiltersOptions = {}): InboundFiltersOptions {\n    return {\n      blacklistUrls: [...(this._options.blacklistUrls || []), ...(clientOptions.blacklistUrls || [])],\n      ignoreErrors: [\n        ...(this._options.ignoreErrors || []),\n        ...(clientOptions.ignoreErrors || []),\n        ...DEFAULT_IGNORE_ERRORS,\n      ],\n      ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,\n      whitelistUrls: [...(this._options.whitelistUrls || []), ...(clientOptions.whitelistUrls || [])],\n    };\n  }\n\n  /** JSDoc */\n  private _getPossibleEventMessages(event: Event): string[] {\n    if (event.message) {\n      return [event.message];\n    }\n    if (event.exception) {\n      try {\n        const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n        return [`${value}`, `${type}: ${value}`];\n      } catch (oO) {\n        logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n        return [];\n      }\n    }\n    return [];\n  }\n\n  /** JSDoc */\n  private _getEventFilterUrl(event: Event): string | null {\n    try {\n      if (event.stacktrace) {\n        const frames = event.stacktrace.frames;\n        return (frames && frames[frames.length - 1].filename) || null;\n      }\n      if (event.exception) {\n        const frames =\n          event.exception.values && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;\n        return (frames && frames[frames.length - 1].filename) || null;\n      }\n      return null;\n    } catch (oO) {\n      logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n      return null;\n    }\n  }\n}\n","// tslint:disable:object-literal-sort-keys\n\n/**\n * This was originally forked from https://github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n */\n\n/**\n * An object representing a single stack frame.\n * {Object} StackFrame\n * {string} url The JavaScript or HTML file URL.\n * {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * {string[]?} args The arguments passed to the function, if known.\n * {number=} line The line number, if known.\n * {number=} column The column number, if known.\n * {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n */\nexport interface StackFrame {\n  url: string;\n  func: string;\n  args: string[];\n  line: number | null;\n  column: number | null;\n}\n\n/**\n * An object representing a JavaScript stack trace.\n * {Object} StackTrace\n * {string} name The name of the thrown exception.\n * {string} message The exception error message.\n * {TraceKit.StackFrame[]} stack An array of stack frames.\n */\nexport interface StackTrace {\n  name: string;\n  message: string;\n  mechanism?: string;\n  stack: StackFrame[];\n  failed?: boolean;\n}\n\n// global reference to slice\nconst UNKNOWN_FUNCTION = '?';\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\nconst chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js))(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nconst geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nconst chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\n/** JSDoc */\nexport function computeStackTrace(ex: any): StackTrace {\n  // tslint:disable:no-unsafe-any\n\n  let stack = null;\n  const popSize: number = ex && ex.framesToPop;\n\n  try {\n    // This must be tried first because Opera 10 *destroys*\n    // its stacktrace property if you try to access the stack\n    // property first!!\n    stack = computeStackTraceFromStacktraceProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    stack = computeStackTraceFromStackProp(ex);\n    if (stack) {\n      return popFrames(stack, popSize);\n    }\n  } catch (e) {\n    // no-empty\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex && ex.name,\n    stack: [],\n    failed: true,\n  };\n}\n\n/** JSDoc */\n// tslint:disable-next-line:cyclomatic-complexity\nfunction computeStackTraceFromStackProp(ex: any): StackTrace | null {\n  // tslint:disable:no-conditional-assignment\n  if (!ex || !ex.stack) {\n    return null;\n  }\n\n  const stack = [];\n  const lines = ex.stack.split('\\n');\n  let isEval;\n  let submatch;\n  let parts;\n  let element;\n\n  for (let i = 0; i < lines.length; ++i) {\n    if ((parts = chrome.exec(lines[i]))) {\n      const isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n      isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n      if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = submatch[1]; // url\n        parts[3] = submatch[2]; // line\n        parts[4] = submatch[3]; // column\n      }\n      element = {\n        // working with the regexp above is super painful. it is quite a hack, but just stripping the `address at `\n        // prefix here seems like the quickest solution for now.\n        url: parts[2] && parts[2].indexOf('address at ') === 0 ? parts[2].substr('address at '.length) : parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: isNative ? [parts[2]] : [],\n        line: parts[3] ? +parts[3] : null,\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = winjs.exec(lines[i]))) {\n      element = {\n        url: parts[2],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: [],\n        line: +parts[3],\n        column: parts[4] ? +parts[4] : null,\n      };\n    } else if ((parts = gecko.exec(lines[i]))) {\n      isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n      if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || `eval`;\n        parts[3] = submatch[1];\n        parts[4] = submatch[2];\n        parts[5] = ''; // no column when eval\n      } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {\n        // FireFox uses this awesome columnNumber property for its top frame\n        // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n        // so adding 1\n        // NOTE: this hack doesn't work if top-most frame is eval\n        stack[0].column = (ex.columnNumber as number) + 1;\n      }\n      element = {\n        url: parts[3],\n        func: parts[1] || UNKNOWN_FUNCTION,\n        args: parts[2] ? parts[2].split(',') : [],\n        line: parts[4] ? +parts[4] : null,\n        column: parts[5] ? +parts[5] : null,\n      };\n    } else {\n      continue;\n    }\n\n    if (!element.func && element.line) {\n      element.func = UNKNOWN_FUNCTION;\n    }\n\n    stack.push(element);\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** JSDoc */\nfunction computeStackTraceFromStacktraceProp(ex: any): StackTrace | null {\n  if (!ex || !ex.stacktrace) {\n    return null;\n  }\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace;\n  const opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n  const opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i;\n  const lines = stacktrace.split('\\n');\n  const stack = [];\n  let parts;\n\n  for (let line = 0; line < lines.length; line += 2) {\n    // tslint:disable:no-conditional-assignment\n    let element = null;\n    if ((parts = opera10Regex.exec(lines[line]))) {\n      element = {\n        url: parts[2],\n        func: parts[3],\n        args: [],\n        line: +parts[1],\n        column: null,\n      };\n    } else if ((parts = opera11Regex.exec(lines[line]))) {\n      element = {\n        url: parts[6],\n        func: parts[3] || parts[4],\n        args: parts[5] ? parts[5].split(',') : [],\n        line: +parts[1],\n        column: +parts[2],\n      };\n    }\n\n    if (element) {\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n      stack.push(element);\n    }\n  }\n\n  if (!stack.length) {\n    return null;\n  }\n\n  return {\n    message: extractMessage(ex),\n    name: ex.name,\n    stack,\n  };\n}\n\n/** Remove N number of frames from the stack */\nfunction popFrames(stacktrace: StackTrace, popSize: number): StackTrace {\n  try {\n    return {\n      ...stacktrace,\n      stack: stacktrace.stack.slice(popSize),\n    };\n  } catch (e) {\n    return stacktrace;\n  }\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex: any): string {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n","import { Event, Exception, StackFrame } from '@sentry/types';\nimport { extractExceptionKeysForMessage, isEvent, normalizeToSize } from '@sentry/utils';\n\nimport { computeStackTrace, StackFrame as TraceKitStackFrame, StackTrace as TraceKitStackTrace } from './tracekit';\n\nconst STACKTRACE_LIMIT = 50;\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromStacktrace(stacktrace: TraceKitStackTrace): Exception {\n  const frames = prepareFramesForEvent(stacktrace.stack);\n\n  const exception: Exception = {\n    type: stacktrace.name,\n    value: stacktrace.message,\n  };\n\n  if (frames && frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  // tslint:disable-next-line:strict-type-predicates\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(exception: {}, syntheticException?: Error, rejection?: boolean): Event {\n  const event: Event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : rejection ? 'UnhandledRejection' : 'Error',\n          value: `Non-Error ${\n            rejection ? 'promise rejection' : 'exception'\n          } captured with keys: ${extractExceptionKeysForMessage(exception)}`,\n        },\n      ],\n    },\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n  };\n\n  if (syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromStacktrace(stacktrace: TraceKitStackTrace): Event {\n  const exception = exceptionFromStacktrace(stacktrace);\n\n  return {\n    exception: {\n      values: [exception],\n    },\n  };\n}\n\n/**\n * @hidden\n */\nexport function prepareFramesForEvent(stack: TraceKitStackFrame[]): StackFrame[] {\n  if (!stack || !stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].func || '';\n  const lastFrameFunction = localStack[localStack.length - 1].func || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .slice(0, STACKTRACE_LIMIT)\n    .map(\n      (frame: TraceKitStackFrame): StackFrame => ({\n        colno: frame.column === null ? undefined : frame.column,\n        filename: frame.url || localStack[0].url,\n        function: frame.func || '?',\n        in_app: true,\n        lineno: frame.line === null ? undefined : frame.line,\n      }),\n    )\n    .reverse();\n}\n","import { Event } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addExceptionTypeValue,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isEvent,\n  isPlainObject,\n} from '@sentry/utils';\n\nimport { eventFromPlainObject, eventFromStacktrace, prepareFramesForEvent } from './parsers';\nimport { computeStackTrace } from './tracekit';\n\n/** JSDoc */\nexport function eventFromUnknownInput(\n  exception: unknown,\n  syntheticException?: Error,\n  options: {\n    rejection?: boolean;\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  let event: Event;\n\n  if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception as ErrorEvent;\n    exception = errorEvent.error; // tslint:disable-line:no-parameter-reassignment\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n    // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)\n    // then we just extract the name and message, as they don't provide anything else\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n    // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n    const domException = exception as DOMException;\n    const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n    const message = domException.message ? `${name}: ${domException.message}` : name;\n\n    event = eventFromString(message, syntheticException, options);\n    addExceptionTypeValue(event, message);\n    return event;\n  }\n  if (isError(exception as Error)) {\n    // we have a real Error object, do nothing\n    event = eventFromStacktrace(computeStackTrace(exception as Error));\n    return event;\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it is plain Object or Event, serialize it manually and extract options\n    // This will allow us to group events based on top-level keys\n    // which is much better than creating new group when any key/value change\n    const objectException = exception as {};\n    event = eventFromPlainObject(objectException, syntheticException, options.rejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(exception as string, syntheticException, options);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\n// this._options.attachStacktrace\n/** JSDoc */\nexport function eventFromString(\n  input: string,\n  syntheticException?: Error,\n  options: {\n    attachStacktrace?: boolean;\n  } = {},\n): Event {\n  const event: Event = {\n    message: input,\n  };\n\n  if (options.attachStacktrace && syntheticException) {\n    const stacktrace = computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n","import { API } from '@sentry/core';\nimport { Event, Response, Transport, TransportOptions } from '@sentry/types';\nimport { PromiseBuffer, SentryError } from '@sentry/utils';\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @deprecated\n   */\n  public url: string;\n\n  /** Helper to get Sentry API endpoints. */\n  protected readonly _api: API;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<Response> = new PromiseBuffer(30);\n\n  public constructor(public options: TransportOptions) {\n    this._api = new API(this.options.dsn);\n    // tslint:disable-next-line:deprecation\n    this.url = this._api.getStoreEndpointWithUrlEncodedAuth();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): PromiseLike<Response> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this._buffer.drain(timeout);\n  }\n}\n","import { eventToSentryRequest } from '@sentry/core';\nimport { Event, Response, Status } from '@sentry/types';\nimport { getGlobalObject, logger, parseRetryAfterHeader, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\nconst global = getGlobalObject<Window>();\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /** Locks transport after receiving 429 response */\n  private _disabledUntil: Date = new Date(Date.now());\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    if (new Date(Date.now()) < this._disabledUntil) {\n      return Promise.reject({\n        event,\n        reason: `Transport locked till ${this._disabledUntil} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const sentryReq = eventToSentryRequest(event, this._api);\n\n    const options: RequestInit = {\n      body: sentryReq.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        global\n          .fetch(sentryReq.url, options)\n          .then(response => {\n            const status = Status.fromHttpCode(response.status);\n\n            if (status === Status.Success) {\n              resolve({ status });\n              return;\n            }\n\n            if (status === Status.RateLimit) {\n              const now = Date.now();\n              this._disabledUntil = new Date(now + parseRetryAfterHeader(now, response.headers.get('Retry-After')));\n              logger.warn(`Too many requests, backing off till: ${this._disabledUntil}`);\n            }\n\n            reject(response);\n          })\n          .catch(reject);\n      }),\n    );\n  }\n}\n","import { eventToSentryRequest } from '@sentry/core';\nimport { Event, Response, Status } from '@sentry/types';\nimport { logger, parseRetryAfterHeader, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /** Locks transport after receiving 429 response */\n  private _disabledUntil: Date = new Date(Date.now());\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    if (new Date(Date.now()) < this._disabledUntil) {\n      return Promise.reject({\n        event,\n        reason: `Transport locked till ${this._disabledUntil} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const sentryReq = eventToSentryRequest(event, this._api);\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = () => {\n          if (request.readyState !== 4) {\n            return;\n          }\n\n          const status = Status.fromHttpCode(request.status);\n\n          if (status === Status.Success) {\n            resolve({ status });\n            return;\n          }\n\n          if (status === Status.RateLimit) {\n            const now = Date.now();\n            this._disabledUntil = new Date(now + parseRetryAfterHeader(now, request.getResponseHeader('Retry-After')));\n            logger.warn(`Too many requests, backing off till: ${this._disabledUntil}`);\n          }\n\n          reject(request);\n        };\n\n        request.open('POST', sentryReq.url);\n        for (const header in this.options.headers) {\n          if (this.options.headers.hasOwnProperty(header)) {\n            request.setRequestHeader(header, this.options.headers[header]);\n          }\n        }\n        request.send(sentryReq.body);\n      }),\n    );\n  }\n}\n","import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { addExceptionMechanism, supportsFetch, SyncPromise } from '@sentry/utils';\n\nimport { eventFromString, eventFromUnknownInput } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To whitelist certain errors instead, use {@link Options.whitelistUrls}.\n   * By default, all errors will be sent.\n   */\n  blacklistUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.blacklistUrls}.\n   * By default, all errors will be sent.\n   */\n  whitelistUrls?: Array<string | RegExp>;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: any, hint?: EventHint): PromiseLike<Event> {\n    const syntheticException = (hint && hint.syntheticException) || undefined;\n    const event = eventFromUnknownInput(exception, syntheticException, {\n      attachStacktrace: this._options.attachStacktrace,\n    });\n    addExceptionMechanism(event, {\n      handled: true,\n      type: 'generic',\n    });\n    event.level = Severity.Error;\n    if (hint && hint.event_id) {\n      event.event_id = hint.event_id;\n    }\n    return SyncPromise.resolve(event);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    const syntheticException = (hint && hint.syntheticException) || undefined;\n    const event = eventFromString(message, syntheticException, {\n      attachStacktrace: this._options.attachStacktrace,\n    });\n    event.level = level;\n    if (hint && hint.event_id) {\n      event.event_id = hint.event_id;\n    }\n    return SyncPromise.resolve(event);\n  }\n}\n","import { captureException, withScope } from '@sentry/core';\nimport { Event as SentryEvent, Mechanism, Scope, WrappedFunction } from '@sentry/types';\nimport { addExceptionMechanism, addExceptionTypeValue } from '@sentry/utils';\n\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n  } = {},\n  before?: WrappedFunction,\n): any {\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // We don't wanna wrap it twice\n    if (fn.__sentry__) {\n      return fn;\n    }\n\n    // If this has already been wrapped in the past, return that wrapped function\n    if (fn.__sentry_wrapped__) {\n      return fn.__sentry_wrapped__;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  const sentryWrapped: WrappedFunction = function(this: any): void {\n    const args = Array.prototype.slice.call(arguments);\n\n    // tslint:disable:no-unsafe-any\n    try {\n      // tslint:disable-next-line:strict-type-predicates\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      if (fn.handleEvent) {\n        // Attempt to invoke user-land function\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n        //       means the sentry.javascript SDK caught an error invoking your application code. This\n        //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n        return fn.handleEvent.apply(this, wrappedArguments);\n      }\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n      // tslint:enable:no-unsafe-any\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope((scope: Scope) => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          const processedEvent = { ...event };\n\n          if (options.mechanism) {\n            addExceptionTypeValue(processedEvent, undefined, undefined);\n            addExceptionMechanism(processedEvent, options.mechanism);\n          }\n\n          processedEvent.extra = {\n            ...processedEvent.extra,\n            arguments: args,\n          };\n\n          return processedEvent;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // tslint:disable-line:no-empty\n\n  fn.prototype = fn.prototype || {};\n  sentryWrapped.prototype = fn.prototype;\n\n  Object.defineProperty(fn, '__sentry_wrapped__', {\n    enumerable: false,\n    value: sentryWrapped,\n  });\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  Object.defineProperties(sentryWrapped, {\n    __sentry__: {\n      enumerable: false,\n      value: true,\n    },\n    __sentry_original__: {\n      enumerable: false,\n      value: fn,\n    },\n  });\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') as PropertyDescriptor;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get(): string {\n          return fn.name;\n        },\n      });\n    }\n  } catch (_oO) {\n    /*no-empty*/\n  }\n\n  return sentryWrapped;\n}\n","import { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  private _onErrorHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  private _onUnhandledRejectionHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  }\n\n  /** JSDoc */\n  private _installGlobalOnErrorHandler(): void {\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      callback: (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n        const error = data.error;\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column)\n          : this._enhanceEventWithInitialFrame(\n              eventFromUnknownInput(error, undefined, {\n                attachStacktrace: client && client.getOptions().attachStacktrace,\n                rejection: false,\n              }),\n              data.url,\n              data.line,\n              data.column,\n            );\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onerror',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n      },\n      type: 'error',\n    });\n\n    this._onErrorHandlerInstalled = true;\n  }\n\n  /** JSDoc */\n  private _installGlobalOnUnhandledRejectionHandler(): void {\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      callback: (e: any) => {\n        let error = e;\n\n        // dig the object of the rejection out of known event types\n        try {\n          // PromiseRejectionEvents store the object of the rejection under 'reason'\n          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n          if ('reason' in e) {\n            error = e.reason;\n          }\n          // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n          // https://github.com/getsentry/sentry-javascript/issues/2380\n          else if ('detail' in e && 'reason' in e.detail) {\n            error = e.detail.reason;\n          }\n        } catch (_oO) {\n          // no-empty\n        }\n\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return true;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromIncompleteRejection(error)\n          : eventFromUnknownInput(error, undefined, {\n              attachStacktrace: client && client.getOptions().attachStacktrace,\n              rejection: true,\n            });\n\n        event.level = Severity.Error;\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onunhandledrejection',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n\n        return;\n      },\n      type: 'unhandledrejection',\n    });\n\n    this._onUnhandledRejectionHandlerInstalled = true;\n  }\n\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  private _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n    const ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n    // If 'message' is ErrorEvent, get real message from inside\n    let message = isErrorEvent(msg) ? msg.message : msg;\n    let name;\n\n    if (isString(message)) {\n      const groups = message.match(ERROR_TYPES_RE);\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n\n    const event = {\n      exception: {\n        values: [\n          {\n            type: name || 'Error',\n            value: message,\n          },\n        ],\n      },\n    };\n\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  }\n\n  /**\n   * This function creates an Event from an TraceKitStackTrace that has part of it missing.\n   */\n  private _eventFromIncompleteRejection(error: any): Event {\n    return {\n      exception: {\n        values: [\n          {\n            type: 'UnhandledRejection',\n            value: `Non-Error promise rejection captured with value: ${error}`,\n          },\n        ],\n      },\n    };\n  }\n\n  /** JSDoc */\n  private _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n\n    const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno,\n        filename,\n        function: '?',\n        in_app: true,\n        lineno,\n      });\n    }\n\n    return event;\n  }\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getFunctionName, getGlobalObject } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\n/** JSDoc */\ninterface TryCatchOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n}\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /** JSDoc */\n  private readonly _options: TryCatchOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<TryCatchOptions>) {\n    this._options = {\n      XMLHttpRequest: true,\n      eventTarget: true,\n      requestAnimationFrame: true,\n      setInterval: true,\n      setTimeout: true,\n      ...options,\n    };\n  }\n\n  /** JSDoc */\n  private _wrapTimeFunction(original: () => void): () => number {\n    return function(this: any, ...args: any[]): number {\n      const originalCallback = args[0];\n      args[0] = wrap(originalCallback, {\n        mechanism: {\n          data: { function: getFunctionName(original) },\n          handled: true,\n          type: 'instrument',\n        },\n      });\n      return original.apply(this, args);\n    };\n  }\n\n  /** JSDoc */\n  private _wrapRAF(original: any): (callback: () => void) => any {\n    return function(this: any, callback: () => void): () => void {\n      return original.call(\n        this,\n        wrap(callback, {\n          mechanism: {\n            data: {\n              function: 'requestAnimationFrame',\n              handler: getFunctionName(original),\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n      );\n    };\n  }\n\n  /** JSDoc */\n  private _wrapEventTarget(target: string): void {\n    const global = getGlobalObject() as { [key: string]: any };\n    const proto = global[target] && global[target].prototype;\n\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (eventName: string, fn: EventListenerObject, options?: boolean | AddEventListenerOptions) => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n        try {\n          // tslint:disable-next-line:no-unbound-method strict-type-predicates\n          if (typeof fn.handleEvent === 'function') {\n            fn.handleEvent = wrap(fn.handleEvent.bind(fn), {\n              mechanism: {\n                data: {\n                  function: 'handleEvent',\n                  handler: getFunctionName(fn),\n                  target,\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            });\n          }\n        } catch (err) {\n          // can sometimes get 'Permission denied to access property \"handle Event'\n        }\n\n        return original.call(\n          this,\n          eventName,\n          wrap((fn as any) as WrappedFunction, {\n            mechanism: {\n              data: {\n                function: 'addEventListener',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          }),\n          options,\n        );\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      original: () => void,\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        let callback = (fn as any) as WrappedFunction;\n        try {\n          callback = callback && (callback.__sentry_wrapped__ || callback);\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return original.call(this, eventName, callback, options);\n      };\n    });\n  }\n\n  /** JSDoc */\n  private _wrapXHR(originalSend: () => void): () => void {\n    return function(this: XMLHttpRequest, ...args: any[]): void {\n      const xhr = this; // tslint:disable-line:no-this-assignment\n      const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n      xmlHttpRequestProps.forEach(prop => {\n        if (prop in xhr && typeof xhr[prop] === 'function') {\n          fill(xhr, prop, function(original: WrappedFunction): Function {\n            const wrapOptions = {\n              mechanism: {\n                data: {\n                  function: prop,\n                  handler: getFunctionName(original),\n                },\n                handled: true,\n                type: 'instrument',\n              },\n            };\n\n            // If Instrument integration has been called before TryCatch, get the name of original function\n            if (original.__sentry_original__) {\n              wrapOptions.mechanism.data.handler = getFunctionName(original.__sentry_original__);\n            }\n\n            // Otherwise wrap directly\n            return wrap(original, wrapOptions);\n          });\n        }\n      });\n\n      return originalSend.apply(this, args);\n    };\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    const global = getGlobalObject();\n\n    if (this._options.setTimeout) {\n      fill(global, 'setTimeout', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.setInterval) {\n      fill(global, 'setInterval', this._wrapTimeFunction.bind(this));\n    }\n\n    if (this._options.requestAnimationFrame) {\n      fill(global, 'requestAnimationFrame', this._wrapRAF.bind(this));\n    }\n\n    if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {\n      fill(XMLHttpRequest.prototype, 'send', this._wrapXHR.bind(this));\n    }\n\n    if (this._options.eventTarget) {\n      const eventTarget = Array.isArray(this._options.eventTarget) ? this._options.eventTarget : DEFAULT_EVENT_TARGET;\n      eventTarget.forEach(this._wrapEventTarget.bind(this));\n    }\n  }\n}\n","import { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n} from '@sentry/utils';\n\n/**\n * @hidden\n */\nexport interface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n  };\n}\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean;\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  private _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  }\n\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  private _domBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node)\n        : htmlTreeAsString((handlerData.event as unknown) as Node);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n      },\n    );\n  }\n\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  private _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'xhr',\n          data: handlerData.xhr.__sentry_xhr__,\n          type: 'http',\n        },\n        {\n          xhr: handlerData.xhr,\n        },\n      );\n\n      return;\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  private _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: handlerData.fetchData,\n          level: Severity.Error,\n          type: 'http',\n        },\n        {\n          data: handlerData.error,\n          input: handlerData.args,\n        },\n      );\n    } else {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: {\n            ...handlerData.fetchData,\n            status_code: handlerData.response.status,\n          },\n          type: 'http',\n        },\n        {\n          input: handlerData.args,\n          response: handlerData.response,\n        },\n      );\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  private _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n    const global = getGlobalObject<Window>();\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(global.location.href);\n    let parsedFrom = parseUrl(from);\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      // tslint:disable-next-line:no-parameter-reassignment\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      // tslint:disable-next-line:no-parameter-reassignment\n      from = parsedFrom.relative;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._consoleBreadcrumb(...args);\n        },\n        type: 'console',\n      });\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._domBreadcrumb(...args);\n        },\n        type: 'dom',\n      });\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._xhrBreadcrumb(...args);\n        },\n        type: 'xhr',\n      });\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._fetchBreadcrumb(...args);\n        },\n        type: 'fetch',\n      });\n    }\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._historyBreadcrumb(...args);\n        },\n        type: 'history',\n      });\n    }\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        return self._handler(event, hint);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(event: Event, hint?: EventHint): Event | null {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n    const linkedErrors = this._walkErrorTree(hint.originalException as ExtendedError, this._key);\n    event.exception.values = [...linkedErrors, ...event.exception.values];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _walkErrorTree(error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n    const stacktrace = computeStackTrace(error[key]);\n    const exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, [exception, ...stack]);\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        if (!global.navigator || !global.location) {\n          return event;\n        }\n\n        const request = event.request || {};\n        request.url = request.url || global.location.href;\n        request.headers = request.headers || {};\n        request.headers['User-Agent'] = global.navigator.userAgent;\n\n        return {\n          ...event,\n          request,\n        };\n      }\n      return event;\n    });\n  }\n}\n","export const SDK_NAME = 'sentry.javascript.browser';\nexport const SDK_VERSION = '5.17.0';\n","import { API, BaseClient, Scope } from '@sentry/core';\nimport { DsnLike, Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { Breadcrumbs } from './integrations';\nimport { SDK_NAME, SDK_VERSION } from './version';\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _sendEvent(event: Event): void {\n    const integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    super._sendEvent(event);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client is disabled');\n      return;\n    }\n\n    const dsn = options.dsn || this.getDsn();\n\n    if (!options.eventId) {\n      logger.error('Missing `eventId` option in showReportDialog call');\n      return;\n    }\n\n    if (!dsn) {\n      logger.error('Missing `Dsn` option in showReportDialog call');\n      return;\n    }\n\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = new API(dsn).getReportDialogEndpoint(options);\n\n    if (options.onLoad) {\n      script.onload = options.onLoad;\n    }\n\n    (document.head || document.body).appendChild(script);\n  }\n}\n","import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject, SyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient, ReportDialogOptions } from './client';\nimport { wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  initAndBind(BrowserClient, options);\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    options.eventId = getCurrentHub().lastEventId();\n  }\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\nexport function wrap(fn: Function): any {\n  return internalWrap(fn)(); // tslint:disable-line:no-unsafe-any\n}\n","export * from './exports';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport * as BrowserIntegrations from './integrations';\nimport * as Transports from './transports';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\n// tslint:disable: no-unsafe-any\nconst _window = getGlobalObject<Window>();\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n// tslint:enable: no-unsafe-any\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Transports };\n","import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** A class object that can instanciate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instanciate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    logger.enable();\n  }\n  const hub = getCurrentHub();\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n"],"names":["LogLevel","Severity","Status","level","Debug","Info","Warning","Error","Fatal","Critical","Log","code","Success","RateLimit","Invalid","Failed","Unknown","setPrototypeOf","Object","__proto__","Array","obj","proto","prop","hasOwnProperty","message","_super","_this","name","_newTarget","prototype","constructor","tslib_1.__extends","isError","wat","toString","call","isInstanceOf","isErrorEvent","isDOMError","isString","isPrimitive","isPlainObject","isEvent","Event","isElement","Element","isThenable","Boolean","then","base","_e","truncate","str","max","length","substr","safeJoin","input","delimiter","isArray","output","i","value","push","String","e","join","isMatchingPattern","pattern","test","indexOf","isNodeEnv","process","fallbackGlobalObject","getGlobalObject","global","window","self","uuid4","crypto","msCrypto","getRandomValues","arr","Uint16Array","pad","num","v","replace","c","r","Math","random","parseUrl","url","match","query","fragment","host","path","protocol","relative","getEventDescription","event","exception","values","type","event_id","consoleSandbox","callback","originalConsole","console","wrappedLevels","forEach","__sentry_original__","result","keys","addExceptionTypeValue","addExceptionMechanism","mechanism","key","_oO","htmlTreeAsString","elem","currentElem","out","height","len","sepLength","nextStr","_htmlElementAsString","parentNode","reverse","el","className","classes","attr","tagName","toLowerCase","id","split","attrWhitelist","getAttribute","INITIAL_TIME","Date","now","prevNow","performanceFallback","timeOrigin","crossPlatformPerformance","mod","module","request","require","performance","_","undefined","timing","navigationStart","timestampWithMs","defaultRetryAfter","parseRetryAfterHeader","header","headerDelay","parseInt","isNaN","headerDate","parse","defaultFunctionName","getFunctionName","fn","PREFIX","this","_enabled","Logger","_i","args","log","warn","error","__SENTRY__","States","logger","_hasWeakSet","WeakSet","_inner","Memo","has","add","delete","splice","fill","source","replacement","original","wrapped","defineProperties","enumerable","_Oo","getWalkSource","err","stack","event_1","target","currentTarget","CustomEvent","detail","jsonSize","encodeURI","utf8Length","JSON","stringify","normalizeToSize","object","depth","maxSize","serialized","normalize","normalizeValue","_events","document","walk","memo","Infinity","normalized","serializeValue","toJSON","acc","memoize","innerKey","unmemoize","extractExceptionKeysForMessage","maxLength","sort","includedKeys","slice","executor","PENDING","_setResult","RESOLVED","reason","REJECTED","state","_state","_resolve","_reject","_value","_executeHandlers","handler","_handlers","concat","cachedHandlers","done","onfulfilled","onrejected","SyncPromise","resolve","reject","collection","counter","resolvedCollection","item","index","TypeError","_attachHandler","val","onfinally","isRejected","_limit","PromiseBuffer","task","isReady","_buffer","remove","SentryError","timeout","capturedSetTimeout","setTimeout","all","clearTimeout","supportsFetch","Headers","Request","Response","isNativeFetch","func","supportsReferrerPolicy","referrerPolicy","lastHref","handlers","instrumented","instrument","originalConsoleLevel","triggerHandlers","Function","apply","instrumentConsole","addEventListener","domEventHandler","bind","keypressEventHandler","eventName","options","handleEvent","innerOriginal","__sentry_wrapped__","instrumentDOM","xhrproto","XMLHttpRequest","originalOpen","xhr","__sentry_xhr__","method","toUpperCase","__sentry_own_request__","onreadystatechangeHandler","readyState","status_code","status","endTimestamp","startTimestamp","onreadystatechange","readyStateArgs","originalSend","instrumentXHR","fetch","doc","createElement","sandbox","hidden","head","appendChild","contentWindow","removeChild","supportsNativeFetch","originalFetch","commonHandlerData","fetchData","getFetchMethod","getFetchUrl","response","instrumentFetch","chrome","isChromePackagedApp","app","runtime","hasHistoryApi","history","pushState","replaceState","oldOnPopState","onpopstate","historyReplacementFunction","originalHistoryFunction","from","to","location","href","instrumentHistory","_oldOnErrorHandler","onerror","msg","line","column","arguments","_oldOnUnhandledRejectionHandler","onunhandledrejection","addInstrumentationHandler","data","_b","tslib_1.__values","fetchArgs","keypressTimeout","lastCapturedEvent","debounceDuration","debounceTimer","debounce","isContentEditable","DSN_REGEX","_fromString","_fromComponents","_validate","Dsn","withPassword","_a","pass","port","projectId","exec","user","_c","pop","projectMatch","components","component","ERROR_MESSAGE","Scope","_scopeListeners","_eventProcessors","_notifyingListeners","processors","hint","processor","final","_notifyEventProcessors","_user","_notifyScopeListeners","tags","_tags","extras","_extra","extra","fingerprint","_fingerprint","_level","transaction","_transaction","context","_contexts","span","_span","scope","newScope","_breadcrumbs","captureContext","updatedScope","contexts","breadcrumb","maxBreadcrumbs","mergedBreadcrumb","timestamp","tslib_1.__spread","trace","getTraceContext","_applyFingerprint","breadcrumbs","getGlobalEventProcessors","globalEventProcessors","addGlobalEventProcessor","API_VERSION","client","_version","_stack","Hub","top","getStackTop","version","setupIntegrations","getStack","parentScope","clone","getClient","pushScope","popScope","eventId","_lastEventId","finalHint","syntheticException","originalException","_invokeClient","beforeBreadcrumb","finalBreadcrumb","addBreadcrumb","min","setUser","setTags","setExtras","setTag","setExtra","setContext","oldHub","makeMain","integration","getIntegration","_callExtensionMethod","sentry","getMainCarrier","extensions","carrier","hub","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","hasHubOnCarrier","isOlderThan","domain","activeDomain","active","registryHubTopStack","getHubFromActiveDomain","callOnHub","captureException","withScope","dsn","_dsnObject","API","_getIngestEndpoint","getBaseApiEndpoint","getStoreEndpoint","_encodedAuth","_getEnvelopeEndpoint","auth","sentry_key","sentry_version","map","encodeURIComponent","clientName","clientVersion","Content-Type","X-Sentry-Auth","dialogOptions","endpoint","encodedOptions","email","installedIntegrations","integrations","defaultIntegrations","userIntegrations","userIntegrationsNames_1","pickedIntegrationsNames_1","defaultIntegration","userIntegration","integrationsNames","getIntegrationsToSetup","setupOnce","setupIntegration","originalFunctionToString","backendClass","_backend","_options","_dsn","BaseClient","_processing","_getBackend","eventFromException","captureEvent","eventFromMessage","_processEvent","finalEvent","_isClientProcessing","clearInterval","interval","getTransport","close","transportFlushed","ready","flush","getOptions","enabled","_isEnabled","_integrations","ticked","setInterval","normalizeDepth","prepared","_applyClientOptions","_applyIntegrationsMetadata","finalScope","update","applyToEvent","evt","_normalizeEvent","b","environment","release","dist","maxValueLength","sdkInfo","sdk","integrationsArray","sendEvent","beforeSend","sampleRate","isTransaction","_prepareEvent","__sentry__","_sendEvent","beforeSendResult","_handleAsyncBeforeSend","processedEvent","NoopTransport","Skipped","_transport","_setupTransport","BaseBackend","_exception","_hint","_message","eventToSentryRequest","api","useEnvelope","req","body","getEnvelopeEndpointWithUrlEncodedAuth","getStoreEndpointWithUrlEncodedAuth","envelope","sent_at","toISOString","FunctionToString","DEFAULT_IGNORE_ERRORS","InboundFilters","clientOptions","_mergeOptions","_shouldDropEvent","_isSentryError","_isIgnoredError","_isBlacklistedUrl","_getEventFilterUrl","_isWhitelistedUrl","ignoreInternal","ignoreErrors","_getPossibleEventMessages","some","blacklistUrls","whitelistUrls","oO","stacktrace","frames_1","frames","filename","frames_2","UNKNOWN_FUNCTION","gecko","winjs","geckoEval","chromeEval","computeStackTrace","ex","popSize","framesToPop","parts","opera10Regex","opera11Regex","lines","element","extractMessage","computeStackTraceFromStacktraceProp","popFrames","submatch","isNative","columnNumber","computeStackTraceFromStackProp","failed","STACKTRACE_LIMIT","exceptionFromStacktrace","prepareFramesForEvent","eventFromStacktrace","localStack","firstFrameFunction","lastFrameFunction","frame","colno","function","in_app","lineno","eventFromUnknownInput","domException","name_1","eventFromString","rejection","__serialized__","eventFromPlainObject","synthetic","attachStacktrace","_api","BaseTransport","drain","FetchTransport","_disabledUntil","Promise","sentryReq","fetchParameters","assign","headers","fromHttpCode","get","catch","XHRTransport","getResponseHeader","open","setRequestHeader","send","BrowserBackend","transportOptions","transport","handled","ignoreOnError","shouldIgnoreOnError","wrap","before","sentryWrapped","wrappedArguments","arg","addEventProcessor","property","defineProperty","getOwnPropertyDescriptor","configurable","GlobalHandlers","stackTraceLimit","_installGlobalOnErrorHandler","_installGlobalOnUnhandledRejectionHandler","_onErrorHandlerInstalled","currentHub","hasIntegration","isFailedOwnDelivery","_eventFromIncompleteOnError","_enhanceEventWithInitialFrame","_onUnhandledRejectionHandlerInstalled","_eventFromIncompleteRejection","groups","getLocationHref","DEFAULT_EVENT_TARGET","TryCatch","eventTarget","requestAnimationFrame","originalCallback","wrapOptions","_wrapTimeFunction","_wrapRAF","_wrapXHR","_wrapEventTarget","Breadcrumbs","dom","category","handlerData","fromString","parsedLoc","parsedFrom","parsedTo","_consoleBreadcrumb","_domBreadcrumb","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","DEFAULT_KEY","DEFAULT_LIMIT","LinkedErrors","_key","limit","_handler","linkedErrors","_walkErrorTree","UserAgent","navigator","userAgent","SDK_NAME","BrowserClient","platform","packages","addSentryBreadcrumb","getDsn","script","async","src","getReportDialogEndpoint","onLoad","onload","CoreIntegrations.InboundFilters","CoreIntegrations.FunctionToString","windowIntegrations","_window","Sentry","Integrations","INTEGRATIONS","CoreIntegrations","BrowserIntegrations","window_1","SENTRY_RELEASE","clientClass","debug","enable","bindClient","initAndBind","lastEventId","showReportDialog","internalWrap"],"mappings":"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"}